package org.tum.opensim.somview;

import java.text.NumberFormat;
import java.text.ParseException;
import java.util.Locale;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.table.DefaultTableModel;
import javax.swing.text.DefaultFormatterFactory;
import javax.swing.text.NumberFormatter;

/**
 * Panel that contains elements to control the contour lines in the umatrix
 */
public class ContourLineControls extends javax.swing.JPanel implements UMatrixObserver{

    
    //SOM Map - contains information about the maximal and minimal 
    //node distances in the umatrix
    SOMMap som = null;
    //the min and max values of the umatrix
    double minVal, maxVal;
    //the umatrix where the contourlines will be displayed in
    private UMatrix uMatrix;
    //a number formatter for the contourline values
    NumberFormatter nf;
    //"active" flag: determines whether the contourlines will be drawn or not
    private boolean active;
    
    public ContourLineControls()
    {
        active = false;
        init();
        this.invalidate();
        this.repaint();
    }
    
    public ContourLineControls(UMatrix uMatrix) {
        init();
        uMatrix.addObserver(this);
        active = false;
        this.uMatrix = uMatrix;
        this.invalidate();
        this.repaint();
    }
    
    private void init()
    {
        //Formatters
        nf = new NumberFormatter(NumberFormat.getNumberInstance(Locale.US));
        //Initialize the graphical components
        initComponents();
        //Setup a document listener for the line thickness textbox
        // => listen for changes as the user types
        txt_lineThickness.getDocument().addDocumentListener(new DocumentListener() {

            public void insertUpdate(DocumentEvent e) {
                btnThicknessChange.setEnabled(true);
            }

            public void removeUpdate(DocumentEvent e) {
                btnThicknessChange.setEnabled(true);
            }

            public void changedUpdate(DocumentEvent e) {
            }
        });
        this.btnThicknessChange.setEnabled(false);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        cBoxOnOff = new javax.swing.JCheckBox();
        label_thickness = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        txt_lineThickness = new javax.swing.JFormattedTextField();
        btnThicknessChange = new javax.swing.JButton();
        tableScrollPane = new javax.swing.JScrollPane();
        table_contourLines = new javax.swing.JTable();
        addRemove = new javax.swing.JPanel();
        btn_addLine = new javax.swing.JButton();
        btn_removeLine = new javax.swing.JButton();

        setMinimumSize(new java.awt.Dimension(50, 80));
        setLayout(new javax.swing.BoxLayout(this, javax.swing.BoxLayout.Y_AXIS));

        cBoxOnOff.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        cBoxOnOff.setText(org.openide.util.NbBundle.getMessage(ContourLineControls.class, "ContourLineControls.cBoxOnOff.text")); // NOI18N
        cBoxOnOff.setAlignmentX(0.5F);
        cBoxOnOff.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        cBoxOnOff.setMaximumSize(new java.awt.Dimension(50000000, 23));
        cBoxOnOff.setMinimumSize(new java.awt.Dimension(150, 23));
        cBoxOnOff.setPreferredSize(new java.awt.Dimension(400, 23));
        cBoxOnOff.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                cBoxOnOffStateChanged(evt);
            }
        });
        add(cBoxOnOff);

        label_thickness.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        label_thickness.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        label_thickness.setLabelFor(txt_lineThickness);
        label_thickness.setText(org.openide.util.NbBundle.getMessage(ContourLineControls.class, "ContourLineControls.label_thickness.text")); // NOI18N
        label_thickness.setAlignmentX(0.5F);
        add(label_thickness);

        jPanel1.setLayout(new javax.swing.BoxLayout(jPanel1, javax.swing.BoxLayout.X_AXIS));

        txt_lineThickness.setFormatterFactory(new DefaultFormatterFactory(nf));
        txt_lineThickness.setText(org.openide.util.NbBundle.getMessage(ContourLineControls.class, "ContourLineControls.txt_lineThickness.text")); // NOI18N
        txt_lineThickness.setMaximumSize(new java.awt.Dimension(2147483647, 25));
        txt_lineThickness.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txt_lineThicknessActionPerformed(evt);
            }
        });
        jPanel1.add(txt_lineThickness);

        btnThicknessChange.setText(org.openide.util.NbBundle.getMessage(ContourLineControls.class, "ContourLineControls.btnThicknessChange.text")); // NOI18N
        btnThicknessChange.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnThicknessChangeActionPerformed(evt);
            }
        });
        jPanel1.add(btnThicknessChange);

        add(jPanel1);

        table_contourLines.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Contourline at"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Double.class
            };
            boolean[] canEdit = new boolean [] {
                false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        table_contourLines.setCellSelectionEnabled(true);
        table_contourLines.setRowHeight(30);
        table_contourLines.setRowMargin(3);
        table_contourLines.setShowVerticalLines(false);
        table_contourLines.getTableHeader().setResizingAllowed(false);
        tableScrollPane.setViewportView(table_contourLines);
        table_contourLines.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        table_contourLines.getColumnModel().getColumn(0).setHeaderValue(org.openide.util.NbBundle.getMessage(ContourLineControls.class, "ContourLineControls.table_contourLines.columnModel.title0")); // NOI18N

        add(tableScrollPane);

        addRemove.setMaximumSize(new java.awt.Dimension(55555555, 23));
        addRemove.setLayout(new javax.swing.BoxLayout(addRemove, javax.swing.BoxLayout.X_AXIS));

        btn_addLine.setText(org.openide.util.NbBundle.getMessage(ContourLineControls.class, "ContourLineControls.btn_addLine.text")); // NOI18N
        btn_addLine.setMaximumSize(new java.awt.Dimension(500000, 23));
        btn_addLine.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_addLineActionPerformed(evt);
            }
        });
        addRemove.add(btn_addLine);

        btn_removeLine.setText(org.openide.util.NbBundle.getMessage(ContourLineControls.class, "ContourLineControls.btn_removeLine.text")); // NOI18N
        btn_removeLine.setMaximumSize(new java.awt.Dimension(500000, 23));
        btn_removeLine.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_removeLineActionPerformed(evt);
            }
        });
        addRemove.add(btn_removeLine);

        add(addRemove);
    }// </editor-fold>//GEN-END:initComponents

    
    /**
    * Verifies if the given string is a number and if it
    * is within the min and max values of the umatrix
    *
    * @param input text from e.g a textfield containing a 
    *              value for a contourline
    * @return indicates whether the input has passed verification
    **/
    private boolean verifyContourlineValue(String input)
    {
        if(input == null || input.isEmpty())
            return false;
        try
        {
            Double value = Double.parseDouble(input);
            //Is value within value range of som?
            if(value >= minVal && value <= maxVal)
            {
                return true;
            }
        }catch(NumberFormatException e)
        {
            return false;
        }
        return false;
    }
    
    /**
    * Is executed when the "add" button is pressed
    **/
    private void btn_addLineActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_addLineActionPerformed
        //Show input dialog
        String value = JOptionPane.showInputDialog(this,
                "Value between " + minVal + " and " + maxVal,
                "Please input a value for the new contourline", JOptionPane.PLAIN_MESSAGE);
        //If user pressed "cancel" => exit
        if (value == null)
        {
            return;
        }
        //Otherwise: check input for correctness and add contourline
        if (verifyContourlineValue(value))
        {
            //Verification successful -> add a new row to the table
            DefaultTableModel model = (DefaultTableModel)table_contourLines.getModel();
            Double dValue = new Double(value);
            model.addRow(new Object[]{dValue});
            //Add contourline to UMatrix
            getUMatrix().addContourline(dValue);
        }
        
        
    }//GEN-LAST:event_btn_addLineActionPerformed

    /**
    * Is executed when the "remove" button is pressed
    **/
    private void btn_removeLineActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_removeLineActionPerformed
        //remove the selected row from the table
        //if no row has been selected, do nothing
        int selRow = table_contourLines.getSelectedRow();
        if(selRow != -1)
        {
            //Selection is valid -> remove the trajectory
            DefaultTableModel model = (DefaultTableModel)table_contourLines.getModel();
            model.removeRow(selRow);
            //Also remove it from the umatrix
            getUMatrix().removeContourLine(selRow);
        }
    }//GEN-LAST:event_btn_removeLineActionPerformed

    /**
    * Turns the contour lines and the uMatrix interpolation on and off
    **/
    private void cBoxOnOffStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_cBoxOnOffStateChanged
        if(active == this.cBoxOnOff.isSelected())
            return;
        active = this.cBoxOnOff.isSelected();
        if(uMatrix != null)
        {
            uMatrix.setContourlinesActive(active);
            uMatrix.createHexagonMap();
            uMatrix.refreshUMatrixImageBuffer();
            uMatrix.repaint();
        }
    }//GEN-LAST:event_cBoxOnOffStateChanged

    /**
     * Contourline thickness changed
     * @param evt change event
     */
    private void txt_lineThicknessActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txt_lineThicknessActionPerformed
        if (txt_lineThickness.getText() != null &&
                !txt_lineThickness.getText().isEmpty())
        {
            Double value = new Double(txt_lineThickness.getText());
            uMatrix.setcLineThickness(value);
        }
        this.btnThicknessChange.setEnabled(false);
    }//GEN-LAST:event_txt_lineThicknessActionPerformed

    /**
     * Confirm line thickness change
     * @param evt 
     */
    private void btnThicknessChangeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnThicknessChangeActionPerformed
        //Just trigger the textfield change event
        this.txt_lineThickness.postActionEvent();
    }//GEN-LAST:event_btnThicknessChangeActionPerformed
    
    /**
    * Clear the table and reload the list of trajectories
    **/
    private void refreshContourlines()
    {
        this.txt_lineThickness.setText("" + getUMatrix().getcLineThickness());
        DefaultTableModel model = (DefaultTableModel)table_contourLines.getModel();
        //Clear list
        for(int i = 0; i < model.getRowCount(); i++)
        {
            model.removeRow(0);
        }
        //Re-add values
        for(Double value : getUMatrix().getContourLineDists())
        {
            model.addRow(new Object[]{value});
        }
    }
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel addRemove;
    private javax.swing.JButton btnThicknessChange;
    private javax.swing.JButton btn_addLine;
    private javax.swing.JButton btn_removeLine;
    private javax.swing.JCheckBox cBoxOnOff;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JLabel label_thickness;
    private javax.swing.JScrollPane tableScrollPane;
    private javax.swing.JTable table_contourLines;
    private javax.swing.JFormattedTextField txt_lineThickness;
    // End of variables declaration//GEN-END:variables

    /**
    * Called by the umatrix observable
    * indicates that something with the umatrix has changed
    **/
    public void update() {
        //Updating ContourlineControl
        if(uMatrix.getMap() != null)
        {
            som = uMatrix.getMap();
            minVal = som.getMinDistance();
            maxVal = som.getMaxDistance();
        }
        refreshContourlines();
        nf.setMinimum(minVal);
        nf.setMaximum(maxVal);
    }

    /**
     * Getter for the umatrix display this contour line control
     * corresponds to
     *
     * @return the uMatrix
     */
    public UMatrix getUMatrix() {
        return uMatrix;
    }

    /**
     * Setter for the umatrix display this contour line control
     * corresponds to
     * @param uMatrix the uMatrix to set
     */
    public void setUMatrix(UMatrix uMatrix) {
        if(this.uMatrix != null)
            this.uMatrix.removeObserver(this);
        this.uMatrix = uMatrix;
        uMatrix.addObserver(this);
    }
}
